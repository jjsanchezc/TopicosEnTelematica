// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: ProductAvailability.proto

package ProductAvailability

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductAvailabilityClient is the client API for ProductAvailability service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductAvailabilityClient interface {
	SearchProduct(ctx context.Context, in *ProductToSearch, opts ...grpc.CallOption) (*ProductAvailabilityResponse, error)
}

type productAvailabilityClient struct {
	cc grpc.ClientConnInterface
}

func NewProductAvailabilityClient(cc grpc.ClientConnInterface) ProductAvailabilityClient {
	return &productAvailabilityClient{cc}
}

func (c *productAvailabilityClient) SearchProduct(ctx context.Context, in *ProductToSearch, opts ...grpc.CallOption) (*ProductAvailabilityResponse, error) {
	out := new(ProductAvailabilityResponse)
	err := c.cc.Invoke(ctx, "/ProductAvailability/SearchProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductAvailabilityServer is the server API for ProductAvailability service.
// All implementations must embed UnimplementedProductAvailabilityServer
// for forward compatibility
type ProductAvailabilityServer interface {
	SearchProduct(context.Context, *ProductToSearch) (*ProductAvailabilityResponse, error)
	mustEmbedUnimplementedProductAvailabilityServer()
}

// UnimplementedProductAvailabilityServer must be embedded to have forward compatible implementations.
type UnimplementedProductAvailabilityServer struct {
}

func (UnimplementedProductAvailabilityServer) SearchProduct(context.Context, *ProductToSearch) (*ProductAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchProduct not implemented")
}
func (UnimplementedProductAvailabilityServer) mustEmbedUnimplementedProductAvailabilityServer() {}

// UnsafeProductAvailabilityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductAvailabilityServer will
// result in compilation errors.
type UnsafeProductAvailabilityServer interface {
	mustEmbedUnimplementedProductAvailabilityServer()
}

func RegisterProductAvailabilityServer(s grpc.ServiceRegistrar, srv ProductAvailabilityServer) {
	s.RegisterService(&ProductAvailability_ServiceDesc, srv)
}

func _ProductAvailability_SearchProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductToSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductAvailabilityServer).SearchProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProductAvailability/SearchProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductAvailabilityServer).SearchProduct(ctx, req.(*ProductToSearch))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductAvailability_ServiceDesc is the grpc.ServiceDesc for ProductAvailability service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductAvailability_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ProductAvailability",
	HandlerType: (*ProductAvailabilityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchProduct",
			Handler:    _ProductAvailability_SearchProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ProductAvailability.proto",
}
